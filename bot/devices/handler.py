from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext


from bot.devices.keyboards import *
from bot.devices.service import DeviceService
from bot.devices.states import DeviceStates, ChangeDeviceParamsStates
from bot.users.service import UserService

router = Router()

@router.message(F.text == "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
async def show_devices_menu(message: Message):
    await message.answer("üîß –ú–µ–Ω—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤", reply_markup=devices_menu)


@router.message(F.text == "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
async def my_devices(message: Message):
    devices = await DeviceService.get_user_devices(message.from_user.id)

    if devices:
        text = "üì± –í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"

        keyboard = my_devices_keyboard(devices)

        await message.answer(text, reply_markup=keyboard)
    else:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
        await message.answer(text)


@router.callback_query(F.data.startswith("my_devices"))
async def my_devices(callback: CallbackQuery):
    devices = await DeviceService.get_user_devices(callback.from_user.id)

    if devices:
        text = "üì± –í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"

        keyboard = my_devices_keyboard(devices)

        await callback.message.answer(text, reply_markup=keyboard)
    else:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
        await callback.message.answer(text)
        await callback.message.delete()


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
async def add_device(message: Message, state: FSMContext):
    devices = await DeviceService.get_available_devices()

    if not devices:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    keyboard = device_keyboard(devices)

    await state.set_state(DeviceStates.choosing_device)
    await message.answer("üîç –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("choose_device_"))
async def device_keyboard_callback(callback: Message, state: FSMContext):
    device_id = int(callback.data.split("_")[2])  # –ü–æ–ª—É—á–∞–µ–º device_id –∏–∑ callback_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Ç–∞–∫–∏–º id
    device = await DeviceService.get_device_by_id(device_id)
    if not device:
        await callback.answer("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(device_id=device.id)
    await state.set_state(DeviceStates.naming_device)
    await callback.message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º callback-–∑–∞–¥–µ—Ä–∂–∫—É


@router.message(DeviceStates.naming_device)
async def name_device(message: Message, state: FSMContext):
    data = await state.get_data()
    device_id = data["device_id"]

    user = await UserService.get_user_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await DeviceService.add_user_device(user.id, device_id, message.text)
    await message.answer(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=None)
    await state.clear()


@router.callback_query(F.data.startswith("mydevice_"))
async def device_info_handler(callback: CallbackQuery):
    device_id = int(callback.data.split("_")[1])

    device = await DeviceService.get_my_device_by_id(device_id)

    if not device:
        await callback.answer("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    params = device.params or {}
    condition = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if params.get("condition") == "ON" else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"

    text = f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.name}\n\n"

    text += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}\n"
    text += f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: \n{'\n'.join([f"{key}: {value}" for key, value in params.items()])}\n"

    await callback.message.answer(text, reply_markup=device_info_keyboard(device))
    await callback.message.delete()


@router.callback_query(F.data.startswith("toggle_device_"))
async def toggle_device_handler(callback: CallbackQuery):
    device_id = int(callback.data.split("_")[2])

    device = await DeviceService.get_my_device_by_id(device_id)

    if not device:
        await callback.answer("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    params = device.params or {}
    current_state = params.get("condition", "OFF")

    new_state = "ON" if current_state == "OFF" else "OFF"
    params["condition"] = new_state

    await DeviceService.update_device_state(device_id, params)

    state_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if new_state == "ON" else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    await callback.message.answer(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device.name}' —Ç–µ–ø–µ—Ä—å {state_text}")


    text = f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.name}\n\n"

    text += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state_text}\n"
    text += f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: \n{'\n'.join([f"{key}: {value}" for key, value in params.items()])}\n"

    await callback.message.answer(text, reply_markup=device_info_keyboard(device))
    await callback.message.delete()


@router.callback_query(F.data.startswith("delete_device_"))
async def delete_device_handler(callback: CallbackQuery):
    device_id = int(callback.data.split("_")[2])

    device = await DeviceService.get_my_device_by_id(device_id)

    if not device:
        await callback.answer("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    await DeviceService.remove_user_device(device_id)

    await callback.message.answer(f"üóë –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device.name}' –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")

    await callback.answer(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device.name}' —É–¥–∞–ª–µ–Ω–æ üóë")

    devices = await DeviceService.get_user_devices(device_id)
    keyboard = my_devices_keyboard(devices)

    await callback.answer("üì± –í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n", reply_markup=keyboard)
    await callback.message.delete()



@router.callback_query(F.data.startswith("change_params_"))
async def toggle_device_handler(callback: CallbackQuery, state: FSMContext):
    device_id = int(callback.data.split("_")[2])

    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\nParam: Value\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ 0")
    await state.set_state(ChangeDeviceParamsStates.new_params)
    await state.update_data(device_id=device_id)


@router.message(ChangeDeviceParamsStates.new_params)
async def register_login_handler(message: Message, state: FSMContext):
    new_params = message.text

    new_params = new_params.split(': ')

    devices = await DeviceService.get_user_devices(message.from_user.id)
    text = "üì± –í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
    keyboard = my_devices_keyboard(devices)

    if len(new_params) != 2:
        if new_params == "0":
            await message.answer(text, reply_markup=keyboard)
            await state.clear()
        else:
            await message.answer(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\nParam: Value\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ 0")
            await state.set_state(ChangeDeviceParamsStates.new_params)
        return

    device_id = await state.get_value("device_id")
    device = await DeviceService.get_my_device_by_id(device_id)

    if new_params[0] not in device.params:
        await message.answer(
            f"–¢–∞–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!!!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\nParam: Value\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ 0")
        await state.set_state(ChangeDeviceParamsStates.new_params)


    else:
        device.params[new_params[0]] = new_params[1]
        await DeviceService.update_device_state(device_id, device.params)
        await message.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω!")

        await message.answer(text, reply_markup=keyboard)
        await state.clear()



