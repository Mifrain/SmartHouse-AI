from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.users.service import UserService
from bot.users.keyboards import auth_keyboard, get_account_keyboard
from bot.general.keyboards import main_menu
from bot.users.states import AuthStates, RegisterStates, ChooseActionStates, AccountStates

router = Router()

async def get_started_message(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\nüîë –í–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç\nüÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        reply_markup=auth_keyboard
    )


@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    user = await UserService.get_user_by_tg_id(message.from_user.id)

    if user:
        await message.answer(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.login}!")
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\nüîë –í–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç\nüÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
            reply_markup=auth_keyboard
        )
        await state.set_state(ChooseActionStates.choose_action)


@router.message(ChooseActionStates.choose_action, F.text.in_(["üîë –õ–æ–≥–∏–Ω", "üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]))
async def auth_choice_handler(message: Message, state: FSMContext):
    if message.text == "üîë –õ–æ–≥–∏–Ω":
        await state.set_state(AuthStates.entering_login)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ 0")
    else:
        await state.set_state(RegisterStates.entering_login)
        await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ 0")

# Auth
@router.message(AuthStates.entering_login)
async def auth_login_handler(message: Message, state: FSMContext):
    if message.text == "0":
        await get_started_message(message)
        await state.set_state(ChooseActionStates.choose_action)
        return

    await state.update_data(login=message.text)
    await state.set_state(AuthStates.entering_password)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ 0")


@router.message(AuthStates.entering_password)
async def auth_password_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    login = data["login"]
    password = message.text

    if password == "0":
        await get_started_message(message)
        await state.set_state(ChooseActionStates.choose_action)
        return

    if await UserService.user_exists(login) and await UserService.verify_password(login, password):
        await UserService.add_device_to_user(login, message.from_user.id)
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!", reply_markup=None)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", reply_markup=main_menu)
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=None)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ 0")

        await state.set_state(AuthStates.entering_login)

# Register
@router.message(RegisterStates.entering_login)
async def register_login_handler(message: Message, state: FSMContext):
    login = message.text

    if login == "0":
        await get_started_message(message)
        await state.set_state(ChooseActionStates.choose_action)
        return

    if await UserService.user_exists(login):
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ 0")
    else:
        await state.update_data(login=login)
        await state.set_state(RegisterStates.entering_password)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ 0")


@router.message(RegisterStates.entering_password)
async def register_password_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    login = data["login"]
    password = message.text

    if len(password) < 8:
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ 0")
        return

    if password == "0":
        await get_started_message(message)
        await state.set_state(ChooseActionStates.choose_action)
        return

    await UserService.create_user(login, password, message.from_user.id)

    await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –ª—é–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.", reply_markup=None)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", reply_markup=main_menu)
    await state.clear()

# logout
@router.message(F.text == "üö™ –í—ã–π—Ç–∏")
async def logout_handler(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user = await UserService.get_user_by_tg_id(message.from_user.id)

    if user:
        await UserService.delete_session(user.id)
        await message.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\nüîë –í–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç\nüÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", reply_markup=auth_keyboard)
        await state.set_state(ChooseActionStates.choose_action)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()

# Account
@router.message(F.text == "üë§ –ê–∫–∫–∞—É–Ω—Ç üë§")
async def account_handler(message: Message, state: FSMContext):
    await message.answer("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=await get_account_keyboard(message.from_user.id))
    await state.set_state(AccountStates.choosing_action)

# Account Edit
@router.message( F.text == "‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω")
async def change_login_start(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
    await state.set_state(AccountStates.entering_new_login)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ 0")


@router.message(AccountStates.entering_new_login)
async def change_login_confirm(message: Message, state: FSMContext):
    """–°–º–µ–Ω–∞ –ª–æ–≥–∏–Ω–∞"""
    new_login = message.text

    if new_login == "0":
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await get_account_keyboard(message.from_user.id))
        await state.clear()
        return

    user = await UserService.get_user_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    success = await UserService.change_login(user.id, new_login)
    if success:
        await message.answer("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=await get_account_keyboard(message.from_user.id))
    else:
        await message.answer("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")

    await state.clear()


@router.message(F.text == "üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
async def change_password_start(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    await state.set_state(AccountStates.entering_old_password)
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ 0")


@router.message(AccountStates.entering_old_password)
async def change_password_old_check(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    old_password = message.text

    if old_password == "0":
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await get_account_keyboard(message.from_user.id))
        await state.clear()
        return

    user = await UserService.get_user_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if not await UserService.verify_password(user.login, old_password):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(old_password=old_password)
    await state.set_state(AccountStates.entering_new_password)
    await message.answer("‚úÖ –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")


@router.message(AccountStates.entering_new_password)
async def change_password_confirm(message: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    new_password = message.text

    if new_password == "0":
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await get_account_keyboard(message.from_user.id))
        await state.clear()
        return

    data = await state.get_data()
    old_password = data.get("old_password")

    user = await UserService.get_user_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    success = await UserService.change_password(user.id, old_password, new_password)
    if success:
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=await get_account_keyboard(message.from_user.id))
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è.")

    await state.clear()


@router.message(F.text.in_(["–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã", "–†–∞–∑—Ä–µ—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"]))
async def change_user_voice_mode_handler(message: Message):

    if message.text == "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã":
        change = False
    else:
        change = True
    print(message.from_user.id)
    await UserService.change_voice_on(message.from_user.id, change)

    await message.answer(f"–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã {'–≤–∫–ª—é—á–µ–Ω—ã' if change else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}! ", reply_markup=await get_account_keyboard(message.from_user.id))
